//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WorkFlowPresentation.WorkFlowWebService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WorkFlowWebService.ISvc")]
    public interface ISvc {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISvc/DoWork", ReplyAction="http://tempuri.org/ISvc/DoWorkResponse")]
        void DoWork();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISvc/DoWork", ReplyAction="http://tempuri.org/ISvc/DoWorkResponse")]
        System.Threading.Tasks.Task DoWorkAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISvc/NewRequest", ReplyAction="http://tempuri.org/ISvc/NewRequestResponse")]
        bool NewRequest(int systemID, int docID, int requestorID, int owner, int curSequenceID, int conditionID, WorkFlowEngine.BLL.RequestorChoice[] choiceList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISvc/NewRequest", ReplyAction="http://tempuri.org/ISvc/NewRequestResponse")]
        System.Threading.Tasks.Task<bool> NewRequestAsync(int systemID, int docID, int requestorID, int owner, int curSequenceID, int conditionID, WorkFlowEngine.BLL.RequestorChoice[] choiceList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISvc/Construct", ReplyAction="http://tempuri.org/ISvc/ConstructResponse")]
        WorkFlowEngine.BLL.RequestorChoice Construct(int systemID, int documentID, int mainSequenceID, int conditionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISvc/Construct", ReplyAction="http://tempuri.org/ISvc/ConstructResponse")]
        System.Threading.Tasks.Task<WorkFlowEngine.BLL.RequestorChoice> ConstructAsync(int systemID, int documentID, int mainSequenceID, int conditionID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISvcChannel : WorkFlowPresentation.WorkFlowWebService.ISvc, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SvcClient : System.ServiceModel.ClientBase<WorkFlowPresentation.WorkFlowWebService.ISvc>, WorkFlowPresentation.WorkFlowWebService.ISvc {
        
        public SvcClient() {
        }
        
        public SvcClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SvcClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SvcClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SvcClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void DoWork() {
            base.Channel.DoWork();
        }
        
        public System.Threading.Tasks.Task DoWorkAsync() {
            return base.Channel.DoWorkAsync();
        }
        
        public bool NewRequest(int systemID, int docID, int requestorID, int owner, int curSequenceID, int conditionID, WorkFlowEngine.BLL.RequestorChoice[] choiceList) {
            return base.Channel.NewRequest(systemID, docID, requestorID, owner, curSequenceID, conditionID, choiceList);
        }
        
        public System.Threading.Tasks.Task<bool> NewRequestAsync(int systemID, int docID, int requestorID, int owner, int curSequenceID, int conditionID, WorkFlowEngine.BLL.RequestorChoice[] choiceList) {
            return base.Channel.NewRequestAsync(systemID, docID, requestorID, owner, curSequenceID, conditionID, choiceList);
        }
        
        public WorkFlowEngine.BLL.RequestorChoice Construct(int systemID, int documentID, int mainSequenceID, int conditionID) {
            return base.Channel.Construct(systemID, documentID, mainSequenceID, conditionID);
        }
        
        public System.Threading.Tasks.Task<WorkFlowEngine.BLL.RequestorChoice> ConstructAsync(int systemID, int documentID, int mainSequenceID, int conditionID) {
            return base.Channel.ConstructAsync(systemID, documentID, mainSequenceID, conditionID);
        }
    }
}
